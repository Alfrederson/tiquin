import { useCallback, useEffect, useState } from 'react'
const squeak_base64 = "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"
export function useSqueak() {
    const [audioBuffer, setAudioBuffer] = useState()
    const ctx = new (window.AudioContext || window.webkitAudioContext)
    const decodeAudioData = useCallback(() => {
        const binarySqueak = atob(squeak_base64)
        const bytes = new Uint8Array(binarySqueak.length)
        for (let i = 0; i < binarySqueak.length; i++)
            bytes[i] = binarySqueak.charCodeAt(i)
        ctx.decodeAudioData(bytes.buffer, setAudioBuffer)
    },[])
    useEffect(decodeAudioData, [])
    const squeak = useCallback(() => {
        if (!audioBuffer)
            return
        const source = ctx.createBufferSource()
        source.buffer = audioBuffer
        source.connect(ctx.destination)
        source.start()
    }, [audioBuffer])
    return squeak
}